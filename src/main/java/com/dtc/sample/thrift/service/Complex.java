/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dtc.sample.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-27")
public class Complex {

  public interface Iface {

    public ComplexType getComplexType(ComplexType complexType) throws org.apache.thrift.TException;

    public SimpleBean getSimpleBean(SimpleBean simpleBean) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getComplexType(ComplexType complexType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSimpleBean(SimpleBean simpleBean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ComplexType getComplexType(ComplexType complexType) throws org.apache.thrift.TException
    {
      send_getComplexType(complexType);
      return recv_getComplexType();
    }

    public void send_getComplexType(ComplexType complexType) throws org.apache.thrift.TException
    {
      getComplexType_args args = new getComplexType_args();
      args.setComplexType(complexType);
      sendBase("getComplexType", args);
    }

    public ComplexType recv_getComplexType() throws org.apache.thrift.TException
    {
      getComplexType_result result = new getComplexType_result();
      receiveBase(result, "getComplexType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComplexType failed: unknown result");
    }

    public SimpleBean getSimpleBean(SimpleBean simpleBean) throws org.apache.thrift.TException
    {
      send_getSimpleBean(simpleBean);
      return recv_getSimpleBean();
    }

    public void send_getSimpleBean(SimpleBean simpleBean) throws org.apache.thrift.TException
    {
      getSimpleBean_args args = new getSimpleBean_args();
      args.setSimpleBean(simpleBean);
      sendBase("getSimpleBean", args);
    }

    public SimpleBean recv_getSimpleBean() throws org.apache.thrift.TException
    {
      getSimpleBean_result result = new getSimpleBean_result();
      receiveBase(result, "getSimpleBean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSimpleBean failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getComplexType(ComplexType complexType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComplexType_call method_call = new getComplexType_call(complexType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComplexType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ComplexType complexType;
      public getComplexType_call(ComplexType complexType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.complexType = complexType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getComplexType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComplexType_args args = new getComplexType_args();
        args.setComplexType(complexType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ComplexType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getComplexType();
      }
    }

    public void getSimpleBean(SimpleBean simpleBean, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSimpleBean_call method_call = new getSimpleBean_call(simpleBean, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSimpleBean_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SimpleBean simpleBean;
      public getSimpleBean_call(SimpleBean simpleBean, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simpleBean = simpleBean;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSimpleBean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSimpleBean_args args = new getSimpleBean_args();
        args.setSimpleBean(simpleBean);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SimpleBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSimpleBean();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getComplexType", new getComplexType());
      processMap.put("getSimpleBean", new getSimpleBean());
      return processMap;
    }

    public static class getComplexType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComplexType_args> {
      public getComplexType() {
        super("getComplexType");
      }

      public getComplexType_args getEmptyArgsInstance() {
        return new getComplexType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComplexType_result getResult(I iface, getComplexType_args args) throws org.apache.thrift.TException {
        getComplexType_result result = new getComplexType_result();
        result.success = iface.getComplexType(args.complexType);
        return result;
      }
    }

    public static class getSimpleBean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSimpleBean_args> {
      public getSimpleBean() {
        super("getSimpleBean");
      }

      public getSimpleBean_args getEmptyArgsInstance() {
        return new getSimpleBean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSimpleBean_result getResult(I iface, getSimpleBean_args args) throws org.apache.thrift.TException {
        getSimpleBean_result result = new getSimpleBean_result();
        result.success = iface.getSimpleBean(args.simpleBean);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getComplexType", new getComplexType());
      processMap.put("getSimpleBean", new getSimpleBean());
      return processMap;
    }

    public static class getComplexType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComplexType_args, ComplexType> {
      public getComplexType() {
        super("getComplexType");
      }

      public getComplexType_args getEmptyArgsInstance() {
        return new getComplexType_args();
      }

      public AsyncMethodCallback<ComplexType> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ComplexType>() { 
          public void onComplete(ComplexType o) {
            getComplexType_result result = new getComplexType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComplexType_result result = new getComplexType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComplexType_args args, org.apache.thrift.async.AsyncMethodCallback<ComplexType> resultHandler) throws TException {
        iface.getComplexType(args.complexType,resultHandler);
      }
    }

    public static class getSimpleBean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSimpleBean_args, SimpleBean> {
      public getSimpleBean() {
        super("getSimpleBean");
      }

      public getSimpleBean_args getEmptyArgsInstance() {
        return new getSimpleBean_args();
      }

      public AsyncMethodCallback<SimpleBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SimpleBean>() { 
          public void onComplete(SimpleBean o) {
            getSimpleBean_result result = new getSimpleBean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSimpleBean_result result = new getSimpleBean_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSimpleBean_args args, org.apache.thrift.async.AsyncMethodCallback<SimpleBean> resultHandler) throws TException {
        iface.getSimpleBean(args.simpleBean,resultHandler);
      }
    }

  }

  public static class getComplexType_args implements org.apache.thrift.TBase<getComplexType_args, getComplexType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComplexType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComplexType_args");

    private static final org.apache.thrift.protocol.TField COMPLEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("complexType", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComplexType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComplexType_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see ComplexType
     */
    public ComplexType complexType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ComplexType
       */
      COMPLEX_TYPE((short)1, "complexType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPLEX_TYPE
            return COMPLEX_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPLEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("complexType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ComplexType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComplexType_args.class, metaDataMap);
    }

    public getComplexType_args() {
    }

    public getComplexType_args(
      ComplexType complexType)
    {
      this();
      this.complexType = complexType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComplexType_args(getComplexType_args other) {
      if (other.isSetComplexType()) {
        this.complexType = other.complexType;
      }
    }

    public getComplexType_args deepCopy() {
      return new getComplexType_args(this);
    }

    @Override
    public void clear() {
      this.complexType = null;
    }

    /**
     * 
     * @see ComplexType
     */
    public ComplexType getComplexType() {
      return this.complexType;
    }

    /**
     * 
     * @see ComplexType
     */
    public getComplexType_args setComplexType(ComplexType complexType) {
      this.complexType = complexType;
      return this;
    }

    public void unsetComplexType() {
      this.complexType = null;
    }

    /** Returns true if field complexType is set (has been assigned a value) and false otherwise */
    public boolean isSetComplexType() {
      return this.complexType != null;
    }

    public void setComplexTypeIsSet(boolean value) {
      if (!value) {
        this.complexType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPLEX_TYPE:
        if (value == null) {
          unsetComplexType();
        } else {
          setComplexType((ComplexType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPLEX_TYPE:
        return getComplexType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPLEX_TYPE:
        return isSetComplexType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComplexType_args)
        return this.equals((getComplexType_args)that);
      return false;
    }

    public boolean equals(getComplexType_args that) {
      if (that == null)
        return false;

      boolean this_present_complexType = true && this.isSetComplexType();
      boolean that_present_complexType = true && that.isSetComplexType();
      if (this_present_complexType || that_present_complexType) {
        if (!(this_present_complexType && that_present_complexType))
          return false;
        if (!this.complexType.equals(that.complexType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_complexType = true && (isSetComplexType());
      list.add(present_complexType);
      if (present_complexType)
        list.add(complexType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getComplexType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComplexType()).compareTo(other.isSetComplexType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComplexType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complexType, other.complexType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComplexType_args(");
      boolean first = true;

      sb.append("complexType:");
      if (this.complexType == null) {
        sb.append("null");
      } else {
        sb.append(this.complexType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComplexType_argsStandardSchemeFactory implements SchemeFactory {
      public getComplexType_argsStandardScheme getScheme() {
        return new getComplexType_argsStandardScheme();
      }
    }

    private static class getComplexType_argsStandardScheme extends StandardScheme<getComplexType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComplexType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPLEX_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.complexType = com.dtc.sample.thrift.service.ComplexType.findByValue(iprot.readI32());
                struct.setComplexTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComplexType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.complexType != null) {
          oprot.writeFieldBegin(COMPLEX_TYPE_FIELD_DESC);
          oprot.writeI32(struct.complexType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComplexType_argsTupleSchemeFactory implements SchemeFactory {
      public getComplexType_argsTupleScheme getScheme() {
        return new getComplexType_argsTupleScheme();
      }
    }

    private static class getComplexType_argsTupleScheme extends TupleScheme<getComplexType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComplexType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComplexType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetComplexType()) {
          oprot.writeI32(struct.complexType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComplexType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.complexType = com.dtc.sample.thrift.service.ComplexType.findByValue(iprot.readI32());
          struct.setComplexTypeIsSet(true);
        }
      }
    }

  }

  public static class getComplexType_result implements org.apache.thrift.TBase<getComplexType_result, getComplexType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComplexType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComplexType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComplexType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComplexType_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ComplexType
     */
    public ComplexType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ComplexType
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ComplexType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComplexType_result.class, metaDataMap);
    }

    public getComplexType_result() {
    }

    public getComplexType_result(
      ComplexType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComplexType_result(getComplexType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getComplexType_result deepCopy() {
      return new getComplexType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ComplexType
     */
    public ComplexType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ComplexType
     */
    public getComplexType_result setSuccess(ComplexType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ComplexType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComplexType_result)
        return this.equals((getComplexType_result)that);
      return false;
    }

    public boolean equals(getComplexType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getComplexType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComplexType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComplexType_resultStandardSchemeFactory implements SchemeFactory {
      public getComplexType_resultStandardScheme getScheme() {
        return new getComplexType_resultStandardScheme();
      }
    }

    private static class getComplexType_resultStandardScheme extends StandardScheme<getComplexType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComplexType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.dtc.sample.thrift.service.ComplexType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComplexType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComplexType_resultTupleSchemeFactory implements SchemeFactory {
      public getComplexType_resultTupleScheme getScheme() {
        return new getComplexType_resultTupleScheme();
      }
    }

    private static class getComplexType_resultTupleScheme extends TupleScheme<getComplexType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComplexType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComplexType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.dtc.sample.thrift.service.ComplexType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSimpleBean_args implements org.apache.thrift.TBase<getSimpleBean_args, getSimpleBean_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSimpleBean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimpleBean_args");

    private static final org.apache.thrift.protocol.TField SIMPLE_BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleBean", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimpleBean_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimpleBean_argsTupleSchemeFactory());
    }

    public SimpleBean simpleBean; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMPLE_BEAN((short)1, "simpleBean");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMPLE_BEAN
            return SIMPLE_BEAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMPLE_BEAN, new org.apache.thrift.meta_data.FieldMetaData("simpleBean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimpleBean_args.class, metaDataMap);
    }

    public getSimpleBean_args() {
    }

    public getSimpleBean_args(
      SimpleBean simpleBean)
    {
      this();
      this.simpleBean = simpleBean;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleBean_args(getSimpleBean_args other) {
      if (other.isSetSimpleBean()) {
        this.simpleBean = new SimpleBean(other.simpleBean);
      }
    }

    public getSimpleBean_args deepCopy() {
      return new getSimpleBean_args(this);
    }

    @Override
    public void clear() {
      this.simpleBean = null;
    }

    public SimpleBean getSimpleBean() {
      return this.simpleBean;
    }

    public getSimpleBean_args setSimpleBean(SimpleBean simpleBean) {
      this.simpleBean = simpleBean;
      return this;
    }

    public void unsetSimpleBean() {
      this.simpleBean = null;
    }

    /** Returns true if field simpleBean is set (has been assigned a value) and false otherwise */
    public boolean isSetSimpleBean() {
      return this.simpleBean != null;
    }

    public void setSimpleBeanIsSet(boolean value) {
      if (!value) {
        this.simpleBean = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIMPLE_BEAN:
        if (value == null) {
          unsetSimpleBean();
        } else {
          setSimpleBean((SimpleBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMPLE_BEAN:
        return getSimpleBean();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMPLE_BEAN:
        return isSetSimpleBean();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleBean_args)
        return this.equals((getSimpleBean_args)that);
      return false;
    }

    public boolean equals(getSimpleBean_args that) {
      if (that == null)
        return false;

      boolean this_present_simpleBean = true && this.isSetSimpleBean();
      boolean that_present_simpleBean = true && that.isSetSimpleBean();
      if (this_present_simpleBean || that_present_simpleBean) {
        if (!(this_present_simpleBean && that_present_simpleBean))
          return false;
        if (!this.simpleBean.equals(that.simpleBean))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_simpleBean = true && (isSetSimpleBean());
      list.add(present_simpleBean);
      if (present_simpleBean)
        list.add(simpleBean);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimpleBean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSimpleBean()).compareTo(other.isSetSimpleBean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimpleBean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleBean, other.simpleBean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimpleBean_args(");
      boolean first = true;

      sb.append("simpleBean:");
      if (this.simpleBean == null) {
        sb.append("null");
      } else {
        sb.append(this.simpleBean);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (simpleBean != null) {
        simpleBean.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimpleBean_argsStandardSchemeFactory implements SchemeFactory {
      public getSimpleBean_argsStandardScheme getScheme() {
        return new getSimpleBean_argsStandardScheme();
      }
    }

    private static class getSimpleBean_argsStandardScheme extends StandardScheme<getSimpleBean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimpleBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMPLE_BEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simpleBean = new SimpleBean();
                struct.simpleBean.read(iprot);
                struct.setSimpleBeanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimpleBean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simpleBean != null) {
          oprot.writeFieldBegin(SIMPLE_BEAN_FIELD_DESC);
          struct.simpleBean.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimpleBean_argsTupleSchemeFactory implements SchemeFactory {
      public getSimpleBean_argsTupleScheme getScheme() {
        return new getSimpleBean_argsTupleScheme();
      }
    }

    private static class getSimpleBean_argsTupleScheme extends TupleScheme<getSimpleBean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimpleBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSimpleBean()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimpleBean()) {
          struct.simpleBean.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimpleBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simpleBean = new SimpleBean();
          struct.simpleBean.read(iprot);
          struct.setSimpleBeanIsSet(true);
        }
      }
    }

  }

  public static class getSimpleBean_result implements org.apache.thrift.TBase<getSimpleBean_result, getSimpleBean_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSimpleBean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSimpleBean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSimpleBean_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSimpleBean_resultTupleSchemeFactory());
    }

    public SimpleBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSimpleBean_result.class, metaDataMap);
    }

    public getSimpleBean_result() {
    }

    public getSimpleBean_result(
      SimpleBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleBean_result(getSimpleBean_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleBean(other.success);
      }
    }

    public getSimpleBean_result deepCopy() {
      return new getSimpleBean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SimpleBean getSuccess() {
      return this.success;
    }

    public getSimpleBean_result setSuccess(SimpleBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimpleBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleBean_result)
        return this.equals((getSimpleBean_result)that);
      return false;
    }

    public boolean equals(getSimpleBean_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSimpleBean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSimpleBean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSimpleBean_resultStandardSchemeFactory implements SchemeFactory {
      public getSimpleBean_resultStandardScheme getScheme() {
        return new getSimpleBean_resultStandardScheme();
      }
    }

    private static class getSimpleBean_resultStandardScheme extends StandardScheme<getSimpleBean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSimpleBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SimpleBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSimpleBean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSimpleBean_resultTupleSchemeFactory implements SchemeFactory {
      public getSimpleBean_resultTupleScheme getScheme() {
        return new getSimpleBean_resultTupleScheme();
      }
    }

    private static class getSimpleBean_resultTupleScheme extends TupleScheme<getSimpleBean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSimpleBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSimpleBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SimpleBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
